import OpenAI from 'openai'
import type { AIPromptData, ComponentOverride, DocsConfig } from './types'

const openai = new OpenAI()

export const buildPrompt = (
	data: AIPromptData,
	override?: ComponentOverride,
): string => {
	const lines: string[] = []

	lines.push(`You are an **expert technical writer** creating Docusaurus pages for Contember React components.

**Follow _every_ numbered instruction exactly** and respond **only** with valid Markdown.

### 1. Document Structure
1. **Overview** – 1-2 concise paragraphs (from JSDoc)
2. **Styling Guidelines** – State that all examples use Tailwind; mention any required Contember theme classes.
3. **Core Concepts** – Bullet list of ideas the reader must grasp.
4. **Quick Start** – Smallest functional example (Tailwind classes included).
5. **Detailed Guide** *(optional)* – Walkthrough with multiple snippets.
6. **Props Reference** – Markdown table with columns **Name | Type | Required | Default | Description**. List inherited props last.
7. **Sub-Components / Building Blocks** – Filters, Triggers, Hooks, etc. Give each its own \`### <Name>\` heading.
8. **Examples** – Focused, real-world scenarios with explanations under each code block.
9. **Best Practices & Gotchas** – Bullet list.
10. **Full API Reference** – Link to autogenerated docs if needed.
11. **Further Reading** – Related components / concepts.

### 2. Writing Style
* Use active voice and second person (“you”).
* Keep sentences < 24 words.
* Prefer bullet lists over long paragraphs.
* Code fences: \` \`\`\`tsx \`\`\` for TS/JSX, \` \`\`\`bash \`\`\` for CLI.
* Insert Tailwind classes directly in JSX (e.g. \`className="flex gap-2"\`).
► **NEW** • *Always show import statements for Contember primitives (e.g. \`Link\`, \`DataView\`) and import them from \`@contember/interface\`:*
  \`import { Link } from '@contember/interface';\`

### 3. Output Rules
* **Do not** invent props or examples that are not present in the source data.
* If a section has no content, write “_None_”.
* End the document with \`<!-- End of Generated Documentation -->\`.

--- Source Data ---\n`)

	lines.push(`## Component\n${data.componentName}\n`)

	lines.push(
		`## Description (from JSDoc)\n${
			data.jsdoc ?? '_No JSDoc description provided._'
		}\n`,
	)

	lines.push(`## API Props (from Type Analysis)`)
	if (data.props && Object.keys(data.props).length) {
		lines.push('```json')
		lines.push(JSON.stringify(data.props, null, 2))
		lines.push('```')
	} else {
		lines.push('_No props data provided or extracted._')
	}
	lines.push('')

	lines.push(`## Examples (from source)`)
	if (data.examples?.length) {
		data.examples.forEach(example => {
			// ► CHANGED – ensure each stored example is trimmed (no leading blank lines)
			lines.push('```tsx')
			lines.push(example.trim())
			lines.push('```')
		});
	} else {
		lines.push('_No examples provided._')
	}
	lines.push('')

	if (override?.notes) {
		lines.push(`## Additional Notes/Context\n${override.notes}\n`)
	}

	lines.push(`--- Generated Documentation ---`)

	return lines.join('\n')
}

export async function generateMarkdownWithAI(
	sourceData: AIPromptData,
	override?: ComponentOverride,
	aiConfig?: DocsConfig['ai'],
): Promise<string | null> {
	const prompt = buildPrompt(sourceData, override)

	const model = aiConfig?.model || 'gpt-3.5-turbo'

	// --- Optional: Log the prompt for debugging ---
	// console.log(`\n--- AI Prompt for ${sourceData.componentName} ---`)
	// console.log(prompt)
	// console.log(`--- End AI Prompt ---`)
	// ---

	try {
		const completion = await openai.chat.completions.create({
			model: model,
			messages: [
				{
					role: 'system',
					content: 'You are an expert technical writer generating Markdown documentation for React components for a Docusaurus site.',
				},
				{ role: 'user', content: prompt },
			],
			// Optional parameters (adjust as needed):
			// temperature: 0.7, // Controls randomness (0.0 to 2.0)
			// max_tokens: 1500, // Max length of the generated response
			// top_p: 1.0,
			// frequency_penalty: 0.0,
			// presence_penalty: 0.0,
		})

		const content = completion.choices[0]?.message?.content

		if (!content) {
			console.error(`AI response for ${sourceData.componentName} was empty.`)
			return null
		}

		// --- Basic Post-processing (Optional) ---
		// You might want to add logic here to clean up the AI's output,
		// ensure the frontmatter is correct, etc.
		let finalContent = content.trim()

		// Add Docusaurus frontmatter (if the AI didn't include it reliably)
		const title = override?.title || sourceData.componentName
		const sidebarLabel = sourceData.componentName
		const frontmatter = `---
title: ${title}
sidebar_label: ${sidebarLabel}
---

`

		// Add frontmatter if it's not already present
		if (!finalContent.startsWith('---')) {
			finalContent = frontmatter + finalContent
		}


		return finalContent

	} catch (error) {
		console.error(`Error calling OpenAI API for ${sourceData.componentName}:`, error)
		// Consider more specific error handling (e.g., rate limits, auth errors)
		return null // Indicate failure
	}
}
