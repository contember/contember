type Query {
  getOneHasManyEntity(by: OneHasManyEntityUniqueWhere!, filter: OneHasManyEntityWhere): OneHasManyEntity
  listOneHasManyEntity(filter: OneHasManyEntityWhere, orderBy: [OneHasManyEntityOrderBy!], offset: Int, limit: Int): [OneHasManyEntity!]!
  paginateOneHasManyEntity(filter: OneHasManyEntityWhere, orderBy: [OneHasManyEntityOrderBy!], skip: Int, first: Int): OneHasManyEntityConnection!
  validateCreateOneHasManyEntity(data: OneHasManyEntityCreateInput!): _ValidationResult!
  validateUpdateOneHasManyEntity(by: OneHasManyEntityUniqueWhere!, data: OneHasManyEntityUpdateInput!): _ValidationResult!
  getRoot(by: RootUniqueWhere!, filter: RootWhere): Root
  listRoot(filter: RootWhere, orderBy: [RootOrderBy!], offset: Int, limit: Int): [Root!]!
  paginateRoot(filter: RootWhere, orderBy: [RootOrderBy!], skip: Int, first: Int): RootConnection!
  validateCreateRoot(data: RootCreateInput!): _ValidationResult!
  validateUpdateRoot(by: RootUniqueWhere!, data: RootUpdateInput!): _ValidationResult!
  transaction: QueryTransaction
  _info: Info
}

type OneHasManyEntity {
  _meta: OneHasManyEntityMeta
  id: UUID!
  a: String
  r2(filter: RootWhere): Root
}

type OneHasManyEntityMeta {
  id: FieldMeta
  a: FieldMeta
  r2: FieldMeta
}

type FieldMeta {
  readable: Boolean
  updatable: Boolean
}

scalar UUID

type Root {
  _meta: RootMeta
  id: UUID!
  r(filter: OneHasManyEntityWhere, orderBy: [OneHasManyEntityOrderBy!], offset: Int, limit: Int): [OneHasManyEntity!]!
  paginateR(filter: OneHasManyEntityWhere, orderBy: [OneHasManyEntityOrderBy!], skip: Int, first: Int): OneHasManyEntityConnection!
}

type RootMeta {
  id: FieldMeta
  r: FieldMeta
}

input OneHasManyEntityWhere {
  id: UUIDCondition
  a: StringCondition
  r2: RootWhere
  and: [OneHasManyEntityWhere]
  or: [OneHasManyEntityWhere]
  not: OneHasManyEntityWhere
}

input UUIDCondition {
  and: [UUIDCondition!]
  or: [UUIDCondition!]
  not: UUIDCondition
  null: Boolean
  isNull: Boolean
  eq: UUID
  notEq: UUID
  in: [UUID!]
  notIn: [UUID!]
  lt: UUID
  lte: UUID
  gt: UUID
  gte: UUID
}

input StringCondition {
  and: [StringCondition!]
  or: [StringCondition!]
  not: StringCondition
  null: Boolean
  isNull: Boolean
  eq: String
  notEq: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  containsCI: String
  startsWithCI: String
  endsWithCI: String
}

input RootWhere {
  id: UUIDCondition
  r: OneHasManyEntityWhere
  and: [RootWhere]
  or: [RootWhere]
  not: RootWhere
}

input OneHasManyEntityOrderBy {
  _random: Boolean
  _randomSeeded: Int
  id: OrderDirection
  a: OrderDirection
  r2: RootOrderBy
}

enum OrderDirection {
  asc
  desc
  ascNullsFirst
  descNullsLast
}

input RootOrderBy {
  _random: Boolean
  _randomSeeded: Int
  id: OrderDirection
}

type OneHasManyEntityConnection {
  pageInfo: PageInfo!
  edges: [OneHasManyEntityEdge!]!
}

type PageInfo {
  totalCount: Int!
}

type OneHasManyEntityEdge {
  node: OneHasManyEntity!
}

input OneHasManyEntityUniqueWhere {
  id: UUID
}

type _ValidationResult {
  valid: Boolean!
  errors: [_ValidationError!]!
}

type _ValidationError {
  path: [_PathFragment!]!
  message: _ValidationMessage!
}

union _PathFragment = _FieldPathFragment | _IndexPathFragment

type _FieldPathFragment {
  field: String!
}

type _IndexPathFragment {
  index: Int!
  alias: String
}

type _ValidationMessage {
  text: String!
}

input OneHasManyEntityCreateInput {
  a: String
  r2: OneHasManyEntityCreateR2EntityRelationInput
  _dummy_field_: Boolean
}

input OneHasManyEntityCreateR2EntityRelationInput {
  connect: RootUniqueWhere
  create: RootWithoutRCreateInput
  connectOrCreate: OneHasManyEntityConnectOrCreateR2RelationInput
}

input RootUniqueWhere {
  id: UUID
  r: OneHasManyEntityUniqueWhere
}

input RootWithoutRCreateInput {
  _dummy_field_: Boolean
}

input OneHasManyEntityConnectOrCreateR2RelationInput {
  connect: RootUniqueWhere
  create: RootWithoutRCreateInput
}

input OneHasManyEntityUpdateInput {
  a: String
  r2: OneHasManyEntityUpdateR2EntityRelationInput
  _dummy_field_: Boolean
}

input OneHasManyEntityUpdateR2EntityRelationInput {
  connect: RootUniqueWhere
  create: RootWithoutRCreateInput
  connectOrCreate: OneHasManyEntityConnectOrCreateR2RelationInput
  update: RootWithoutRUpdateInput
  upsert: OneHasManyEntityUpsertR2RelationInput
  disconnect: Boolean
  delete: Boolean
}

input RootWithoutRUpdateInput {
  _dummy_field_: Boolean
}

input OneHasManyEntityUpsertR2RelationInput {
  update: RootWithoutRUpdateInput
  create: RootWithoutRCreateInput
}

type RootConnection {
  pageInfo: PageInfo!
  edges: [RootEdge!]!
}

type RootEdge {
  node: Root!
}

input RootCreateInput {
  r: [RootCreateREntityRelationInput!]
  _dummy_field_: Boolean
}

input RootCreateREntityRelationInput {
  connect: OneHasManyEntityUniqueWhere
  create: OneHasManyEntityWithoutR2CreateInput
  connectOrCreate: RootConnectOrCreateRRelationInput
  alias: String
}

input OneHasManyEntityWithoutR2CreateInput {
  a: String
  _dummy_field_: Boolean
}

input RootConnectOrCreateRRelationInput {
  connect: OneHasManyEntityUniqueWhere
  create: OneHasManyEntityWithoutR2CreateInput
}

input RootUpdateInput {
  r: [RootUpdateREntityRelationInput!]
  _dummy_field_: Boolean
}

input RootUpdateREntityRelationInput {
  create: OneHasManyEntityWithoutR2CreateInput
  update: RootUpdateRRelationInput
  upsert: RootUpsertRRelationInput
  connect: OneHasManyEntityUniqueWhere
  disconnect: OneHasManyEntityUniqueWhere
  alias: String
}

input RootUpdateRRelationInput {
  by: OneHasManyEntityUniqueWhere
  data: OneHasManyEntityWithoutR2UpdateInput
}

input OneHasManyEntityWithoutR2UpdateInput {
  a: String
  _dummy_field_: Boolean
}

input RootUpsertRRelationInput {
  by: OneHasManyEntityUniqueWhere
  update: OneHasManyEntityWithoutR2UpdateInput
  create: OneHasManyEntityWithoutR2CreateInput
}

type QueryTransaction {
  getOneHasManyEntity(by: OneHasManyEntityUniqueWhere!, filter: OneHasManyEntityWhere): OneHasManyEntity
  listOneHasManyEntity(filter: OneHasManyEntityWhere, orderBy: [OneHasManyEntityOrderBy!], offset: Int, limit: Int): [OneHasManyEntity!]!
  paginateOneHasManyEntity(filter: OneHasManyEntityWhere, orderBy: [OneHasManyEntityOrderBy!], skip: Int, first: Int): OneHasManyEntityConnection!
  validateCreateOneHasManyEntity(data: OneHasManyEntityCreateInput!): _ValidationResult!
  validateUpdateOneHasManyEntity(by: OneHasManyEntityUniqueWhere!, data: OneHasManyEntityUpdateInput!): _ValidationResult!
  getRoot(by: RootUniqueWhere!, filter: RootWhere): Root
  listRoot(filter: RootWhere, orderBy: [RootOrderBy!], offset: Int, limit: Int): [Root!]!
  paginateRoot(filter: RootWhere, orderBy: [RootOrderBy!], skip: Int, first: Int): RootConnection!
  validateCreateRoot(data: RootCreateInput!): _ValidationResult!
  validateUpdateRoot(by: RootUniqueWhere!, data: RootUpdateInput!): _ValidationResult!
}

type Info {
  description: String
}

type Mutation {
  createOneHasManyEntity(data: OneHasManyEntityCreateInput!): OneHasManyEntityCreateResult!
  updateOneHasManyEntity(by: OneHasManyEntityUniqueWhere!, filter: OneHasManyEntityWhere, data: OneHasManyEntityUpdateInput!): OneHasManyEntityUpdateResult!
  upsertOneHasManyEntity(by: OneHasManyEntityUniqueWhere!, filter: OneHasManyEntityWhere, update: OneHasManyEntityUpdateInput!, create: OneHasManyEntityCreateInput!): OneHasManyEntityUpsertResult!
  createRoot(data: RootCreateInput!): RootCreateResult!
  deleteRoot(by: RootUniqueWhere!, filter: RootWhere): RootDeleteResult!
  updateRoot(by: RootUniqueWhere!, filter: RootWhere, data: RootUpdateInput!): RootUpdateResult!
  upsertRoot(by: RootUniqueWhere!, filter: RootWhere, update: RootUpdateInput!, create: RootCreateInput!): RootUpsertResult!
  transaction(options: MutationTransactionOptions): MutationTransaction!
  query: Query!
}

type OneHasManyEntityCreateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: OneHasManyEntity
  validation: _ValidationResult!
}

interface MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
}

type _MutationError {
  path: [_PathFragment!]! @deprecated(reason: "Use `paths`.")
  paths: [[_PathFragment!]!]!
  type: _MutationErrorType!
  message: String
}

enum _MutationErrorType {
  NotNullConstraintViolation
  UniqueConstraintViolation
  ForeignKeyConstraintViolation
  NotFoundOrDenied
  NonUniqueWhereInput
  InvalidDataInput
  SqlError
}

type OneHasManyEntityUpdateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: OneHasManyEntity
  validation: _ValidationResult!
}

type OneHasManyEntityUpsertResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: OneHasManyEntity
  validation: _ValidationResult!
}

type RootCreateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Root
  validation: _ValidationResult!
}

type RootDeleteResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Root
}

type RootUpdateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Root
  validation: _ValidationResult!
}

type RootUpsertResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Root
  validation: _ValidationResult!
}

type MutationTransaction {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  validation: _ValidationResult!
  createOneHasManyEntity(data: OneHasManyEntityCreateInput!): OneHasManyEntityCreateResult!
  updateOneHasManyEntity(by: OneHasManyEntityUniqueWhere!, filter: OneHasManyEntityWhere, data: OneHasManyEntityUpdateInput!): OneHasManyEntityUpdateResult!
  upsertOneHasManyEntity(by: OneHasManyEntityUniqueWhere!, filter: OneHasManyEntityWhere, update: OneHasManyEntityUpdateInput!, create: OneHasManyEntityCreateInput!): OneHasManyEntityUpsertResult!
  createRoot(data: RootCreateInput!): RootCreateResult!
  deleteRoot(by: RootUniqueWhere!, filter: RootWhere): RootDeleteResult!
  updateRoot(by: RootUniqueWhere!, filter: RootWhere, data: RootUpdateInput!): RootUpdateResult!
  upsertRoot(by: RootUniqueWhere!, filter: RootWhere, update: RootUpdateInput!, create: RootCreateInput!): RootUpsertResult!
  query: Query
}

input MutationTransactionOptions {
  deferForeignKeyConstraints: Boolean
}
