type Query {
  getAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere): Author
  listAuthor(filter: AuthorWhere, orderBy: [AuthorOrderBy!], offset: Int, limit: Int): [Author!]!
  paginateAuthor(filter: AuthorWhere, orderBy: [AuthorOrderBy!], skip: Int, first: Int): AuthorConnection!
  validateCreateAuthor(data: AuthorCreateInput!): _ValidationResult!
  validateUpdateAuthor(by: AuthorUniqueWhere!, data: AuthorUpdateInput!): _ValidationResult!
  getPost(by: PostUniqueWhere!, filter: PostWhere): Post
  listPost(filter: PostWhere, orderBy: [PostOrderBy!], offset: Int, limit: Int): [Post!]!
  paginatePost(filter: PostWhere, orderBy: [PostOrderBy!], skip: Int, first: Int): PostConnection!
  validateCreatePost(data: PostCreateInput!): _ValidationResult!
  validateUpdatePost(by: PostUniqueWhere!, data: PostUpdateInput!): _ValidationResult!
  getPostLocale(by: PostLocaleUniqueWhere!, filter: PostLocaleWhere): PostLocale
  listPostLocale(filter: PostLocaleWhere, orderBy: [PostLocaleOrderBy!], offset: Int, limit: Int): [PostLocale!]!
  paginatePostLocale(filter: PostLocaleWhere, orderBy: [PostLocaleOrderBy!], skip: Int, first: Int): PostLocaleConnection!
  validateCreatePostLocale(data: PostLocaleCreateInput!): _ValidationResult!
  validateUpdatePostLocale(by: PostLocaleUniqueWhere!, data: PostLocaleUpdateInput!): _ValidationResult!
  getCategory(by: CategoryUniqueWhere!, filter: CategoryWhere): Category
  listCategory(filter: CategoryWhere, orderBy: [CategoryOrderBy!], offset: Int, limit: Int): [Category!]!
  paginateCategory(filter: CategoryWhere, orderBy: [CategoryOrderBy!], skip: Int, first: Int): CategoryConnection!
  validateCreateCategory(data: CategoryCreateInput!): _ValidationResult!
  validateUpdateCategory(by: CategoryUniqueWhere!, data: CategoryUpdateInput!): _ValidationResult!
  transaction: QueryTransaction
  _info: Info
}

type Author {
  _meta: AuthorMeta
  id: UUID!
  name: String
  posts(filter: PostWhere, orderBy: [PostOrderBy!], offset: Int, limit: Int): [Post!]!
  postsByLocales(by: AuthorPostsByLocalesUniqueWhere!, filter: PostWhere): Post
  paginatePosts(filter: PostWhere, orderBy: [PostOrderBy!], skip: Int, first: Int): PostConnection!
}

type AuthorMeta {
  id: FieldMeta
  name: FieldMeta
  posts: FieldMeta
}

type FieldMeta {
  readable: Boolean
  updatable: Boolean
}

scalar UUID

type Post {
  _meta: PostMeta
  id: UUID!
  state: PostState
  publishedAt: DateTime
  categories(filter: CategoryWhere, orderBy: [CategoryOrderBy!], offset: Int, limit: Int): [Category!]!
  author(filter: AuthorWhere): Author
  locales(filter: PostLocaleWhere, orderBy: [PostLocaleOrderBy!], offset: Int, limit: Int): [PostLocale!]!
  localesByLocale(by: PostLocalesByLocaleUniqueWhere!, filter: PostLocaleWhere): PostLocale
  paginateCategories(filter: CategoryWhere, orderBy: [CategoryOrderBy!], skip: Int, first: Int): CategoryConnection!
  paginateLocales(filter: PostLocaleWhere, orderBy: [PostLocaleOrderBy!], skip: Int, first: Int): PostLocaleConnection!
}

type PostMeta {
  id: FieldMeta
  state: FieldMeta
  publishedAt: FieldMeta
  categories: FieldMeta
  author: FieldMeta
  locales: FieldMeta
}

enum PostState {
  draft
  forReview
  published
}

scalar DateTime

type Category {
  _meta: CategoryMeta
  id: UUID!
  name: String
  posts(filter: PostWhere, orderBy: [PostOrderBy!], offset: Int, limit: Int): [Post!]!
  paginatePosts(filter: PostWhere, orderBy: [PostOrderBy!], skip: Int, first: Int): PostConnection!
}

type CategoryMeta {
  id: FieldMeta
  name: FieldMeta
  posts: FieldMeta
}

input PostWhere {
  id: UUIDCondition
  state: PostStateEnumCondition
  publishedAt: DateTimeCondition
  categories: CategoryWhere
  author: AuthorWhere
  locales: PostLocaleWhere
  and: [PostWhere]
  or: [PostWhere]
  not: PostWhere
}

input UUIDCondition {
  and: [UUIDCondition!]
  or: [UUIDCondition!]
  not: UUIDCondition
  null: Boolean
  isNull: Boolean
  eq: UUID
  notEq: UUID
  in: [UUID!]
  notIn: [UUID!]
  lt: UUID
  lte: UUID
  gt: UUID
  gte: UUID
}

input PostStateEnumCondition {
  and: [PostStateEnumCondition!]
  or: [PostStateEnumCondition!]
  not: PostStateEnumCondition
  null: Boolean
  isNull: Boolean
  eq: PostState
  notEq: PostState
  in: [PostState!]
  notIn: [PostState!]
  lt: PostState
  lte: PostState
  gt: PostState
  gte: PostState
}

input DateTimeCondition {
  and: [DateTimeCondition!]
  or: [DateTimeCondition!]
  not: DateTimeCondition
  null: Boolean
  isNull: Boolean
  eq: DateTime
  notEq: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

input CategoryWhere {
  id: UUIDCondition
  name: StringCondition
  posts: PostWhere
  and: [CategoryWhere]
  or: [CategoryWhere]
  not: CategoryWhere
}

input StringCondition {
  and: [StringCondition!]
  or: [StringCondition!]
  not: StringCondition
  null: Boolean
  isNull: Boolean
  eq: String
  notEq: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  containsCI: String
  startsWithCI: String
  endsWithCI: String
}

input AuthorWhere {
  id: UUIDCondition
  name: StringCondition
  posts: PostWhere
  and: [AuthorWhere]
  or: [AuthorWhere]
  not: AuthorWhere
}

input PostLocaleWhere {
  id: UUIDCondition
  locale: LocaleEnumCondition
  title: StringCondition
  post: PostWhere
  and: [PostLocaleWhere]
  or: [PostLocaleWhere]
  not: PostLocaleWhere
}

input LocaleEnumCondition {
  and: [LocaleEnumCondition!]
  or: [LocaleEnumCondition!]
  not: LocaleEnumCondition
  null: Boolean
  isNull: Boolean
  eq: Locale
  notEq: Locale
  in: [Locale!]
  notIn: [Locale!]
  lt: Locale
  lte: Locale
  gt: Locale
  gte: Locale
}

enum Locale {
  cs
  en
}

input PostOrderBy {
  _random: Boolean
  _randomSeeded: Int
  id: OrderDirection
  state: OrderDirection
  publishedAt: OrderDirection
  author: AuthorOrderBy
}

enum OrderDirection {
  asc
  desc
  ascNullsFirst
  descNullsLast
}

input AuthorOrderBy {
  _random: Boolean
  _randomSeeded: Int
  id: OrderDirection
  name: OrderDirection
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge!]!
}

type PageInfo {
  totalCount: Int!
}

type PostEdge {
  node: Post!
}

input CategoryOrderBy {
  _random: Boolean
  _randomSeeded: Int
  id: OrderDirection
  name: OrderDirection
}

type PostLocale {
  _meta: PostLocaleMeta
  id: UUID!
  locale: Locale
  title: String
  post(filter: PostWhere): Post
}

type PostLocaleMeta {
  id: FieldMeta
  locale: FieldMeta
  title: FieldMeta
  post: FieldMeta
}

input PostLocaleOrderBy {
  _random: Boolean
  _randomSeeded: Int
  id: OrderDirection
  locale: OrderDirection
  title: OrderDirection
  post: PostOrderBy
}

input PostLocalesByLocaleUniqueWhere {
  locale: Locale
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge!]!
}

type CategoryEdge {
  node: Category!
}

type PostLocaleConnection {
  pageInfo: PageInfo!
  edges: [PostLocaleEdge!]!
}

type PostLocaleEdge {
  node: PostLocale!
}

input AuthorPostsByLocalesUniqueWhere {
  locales: PostLocaleUniqueWhere
}

input PostLocaleUniqueWhere {
  id: UUID
  post: PostUniqueWhere
  locale: Locale
}

input PostUniqueWhere {
  id: UUID
  locales: PostLocaleUniqueWhere
}

input AuthorUniqueWhere {
  id: UUID
  posts: PostUniqueWhere
}

type AuthorConnection {
  pageInfo: PageInfo!
  edges: [AuthorEdge!]!
}

type AuthorEdge {
  node: Author!
}

type _ValidationResult {
  valid: Boolean!
  errors: [_ValidationError!]!
}

type _ValidationError {
  path: [_PathFragment!]!
  message: _ValidationMessage!
}

union _PathFragment = _FieldPathFragment | _IndexPathFragment

type _FieldPathFragment {
  field: String!
}

type _IndexPathFragment {
  index: Int!
  alias: String
}

type _ValidationMessage {
  text: String!
}

input AuthorCreateInput {
  name: String
  posts: [AuthorCreatePostsEntityRelationInput!]
  _dummy_field_: Boolean
}

input AuthorCreatePostsEntityRelationInput {
  connect: PostUniqueWhere
  create: PostWithoutAuthorCreateInput
  connectOrCreate: AuthorConnectOrCreatePostsRelationInput
  alias: String
}

input PostWithoutAuthorCreateInput {
  state: PostState
  publishedAt: DateTime
  categories: [PostCreateCategoriesEntityRelationInput!]
  locales: [PostCreateLocalesEntityRelationInput!]
  _dummy_field_: Boolean
}

input PostCreateCategoriesEntityRelationInput {
  connect: CategoryUniqueWhere
  create: CategoryWithoutPostsCreateInput
  connectOrCreate: PostConnectOrCreateCategoriesRelationInput
  alias: String
}

input CategoryUniqueWhere {
  id: UUID
  name: String
}

input CategoryWithoutPostsCreateInput {
  name: String
  _dummy_field_: Boolean
}

input PostConnectOrCreateCategoriesRelationInput {
  connect: CategoryUniqueWhere
  create: CategoryWithoutPostsCreateInput
}

input PostCreateLocalesEntityRelationInput {
  connect: PostLocaleUniqueWhere
  create: PostLocaleWithoutPostCreateInput
  connectOrCreate: PostConnectOrCreateLocalesRelationInput
  alias: String
}

input PostLocaleWithoutPostCreateInput {
  locale: Locale
  title: String
  _dummy_field_: Boolean
}

input PostConnectOrCreateLocalesRelationInput {
  connect: PostLocaleUniqueWhere
  create: PostLocaleWithoutPostCreateInput
}

input AuthorConnectOrCreatePostsRelationInput {
  connect: PostUniqueWhere
  create: PostWithoutAuthorCreateInput
}

input AuthorUpdateInput {
  name: String
  posts: [AuthorUpdatePostsEntityRelationInput!]
  _dummy_field_: Boolean
}

input AuthorUpdatePostsEntityRelationInput {
  create: PostWithoutAuthorCreateInput
  update: AuthorUpdatePostsRelationInput
  upsert: AuthorUpsertPostsRelationInput
  connect: PostUniqueWhere
  disconnect: PostUniqueWhere
  delete: PostUniqueWhere
  alias: String
}

input AuthorUpdatePostsRelationInput {
  by: PostUniqueWhere
  data: PostWithoutAuthorUpdateInput
}

input PostWithoutAuthorUpdateInput {
  state: PostState
  publishedAt: DateTime
  categories: [PostUpdateCategoriesEntityRelationInput!]
  locales: [PostUpdateLocalesEntityRelationInput!]
  _dummy_field_: Boolean
}

input PostUpdateCategoriesEntityRelationInput {
  create: CategoryWithoutPostsCreateInput
  update: PostUpdateCategoriesRelationInput
  upsert: PostUpsertCategoriesRelationInput
  connect: CategoryUniqueWhere
  disconnect: CategoryUniqueWhere
  delete: CategoryUniqueWhere
  alias: String
}

input PostUpdateCategoriesRelationInput {
  by: CategoryUniqueWhere
  data: CategoryWithoutPostsUpdateInput
}

input CategoryWithoutPostsUpdateInput {
  name: String
  _dummy_field_: Boolean
}

input PostUpsertCategoriesRelationInput {
  by: CategoryUniqueWhere
  update: CategoryWithoutPostsUpdateInput
  create: CategoryWithoutPostsCreateInput
}

input PostUpdateLocalesEntityRelationInput {
  create: PostLocaleWithoutPostCreateInput
  update: PostUpdateLocalesRelationInput
  upsert: PostUpsertLocalesRelationInput
  connect: PostLocaleUniqueWhere
  disconnect: PostLocaleUniqueWhere
  delete: PostLocaleUniqueWhere
  alias: String
}

input PostUpdateLocalesRelationInput {
  by: PostLocaleUniqueWhere
  data: PostLocaleWithoutPostUpdateInput
}

input PostLocaleWithoutPostUpdateInput {
  locale: Locale
  title: String
  _dummy_field_: Boolean
}

input PostUpsertLocalesRelationInput {
  by: PostLocaleUniqueWhere
  update: PostLocaleWithoutPostUpdateInput
  create: PostLocaleWithoutPostCreateInput
}

input AuthorUpsertPostsRelationInput {
  by: PostUniqueWhere
  update: PostWithoutAuthorUpdateInput
  create: PostWithoutAuthorCreateInput
}

input PostCreateInput {
  state: PostState
  publishedAt: DateTime
  categories: [PostCreateCategoriesEntityRelationInput!]
  author: PostCreateAuthorEntityRelationInput
  locales: [PostCreateLocalesEntityRelationInput!]
  _dummy_field_: Boolean
}

input PostCreateAuthorEntityRelationInput {
  connect: AuthorUniqueWhere
  create: AuthorWithoutPostsCreateInput
  connectOrCreate: PostConnectOrCreateAuthorRelationInput
}

input AuthorWithoutPostsCreateInput {
  name: String
  _dummy_field_: Boolean
}

input PostConnectOrCreateAuthorRelationInput {
  connect: AuthorUniqueWhere
  create: AuthorWithoutPostsCreateInput
}

input PostUpdateInput {
  state: PostState
  publishedAt: DateTime
  categories: [PostUpdateCategoriesEntityRelationInput!]
  author: PostUpdateAuthorEntityRelationInput
  locales: [PostUpdateLocalesEntityRelationInput!]
  _dummy_field_: Boolean
}

input PostUpdateAuthorEntityRelationInput {
  connect: AuthorUniqueWhere
  create: AuthorWithoutPostsCreateInput
  connectOrCreate: PostConnectOrCreateAuthorRelationInput
  update: AuthorWithoutPostsUpdateInput
  upsert: PostUpsertAuthorRelationInput
  disconnect: Boolean
  delete: Boolean
}

input AuthorWithoutPostsUpdateInput {
  name: String
  _dummy_field_: Boolean
}

input PostUpsertAuthorRelationInput {
  update: AuthorWithoutPostsUpdateInput
  create: AuthorWithoutPostsCreateInput
}

input PostLocaleCreateInput {
  locale: Locale
  title: String
  post: PostLocaleCreatePostEntityRelationInput
  _dummy_field_: Boolean
}

input PostLocaleCreatePostEntityRelationInput {
  connect: PostUniqueWhere
  create: PostWithoutLocalesCreateInput
  connectOrCreate: PostLocaleConnectOrCreatePostRelationInput
}

input PostWithoutLocalesCreateInput {
  state: PostState
  publishedAt: DateTime
  categories: [PostCreateCategoriesEntityRelationInput!]
  author: PostCreateAuthorEntityRelationInput
  _dummy_field_: Boolean
}

input PostLocaleConnectOrCreatePostRelationInput {
  connect: PostUniqueWhere
  create: PostWithoutLocalesCreateInput
}

input PostLocaleUpdateInput {
  locale: Locale
  title: String
  post: PostLocaleUpdatePostEntityRelationInput
  _dummy_field_: Boolean
}

input PostLocaleUpdatePostEntityRelationInput {
  connect: PostUniqueWhere
  create: PostWithoutLocalesCreateInput
  connectOrCreate: PostLocaleConnectOrCreatePostRelationInput
  update: PostWithoutLocalesUpdateInput
  upsert: PostLocaleUpsertPostRelationInput
  disconnect: Boolean
  delete: Boolean
}

input PostWithoutLocalesUpdateInput {
  state: PostState
  publishedAt: DateTime
  categories: [PostUpdateCategoriesEntityRelationInput!]
  author: PostUpdateAuthorEntityRelationInput
  _dummy_field_: Boolean
}

input PostLocaleUpsertPostRelationInput {
  update: PostWithoutLocalesUpdateInput
  create: PostWithoutLocalesCreateInput
}

input CategoryCreateInput {
  name: String
  posts: [CategoryCreatePostsEntityRelationInput!]
  _dummy_field_: Boolean
}

input CategoryCreatePostsEntityRelationInput {
  connect: PostUniqueWhere
  create: PostWithoutCategoriesCreateInput
  connectOrCreate: CategoryConnectOrCreatePostsRelationInput
  alias: String
}

input PostWithoutCategoriesCreateInput {
  state: PostState
  publishedAt: DateTime
  author: PostCreateAuthorEntityRelationInput
  locales: [PostCreateLocalesEntityRelationInput!]
  _dummy_field_: Boolean
}

input CategoryConnectOrCreatePostsRelationInput {
  connect: PostUniqueWhere
  create: PostWithoutCategoriesCreateInput
}

input CategoryUpdateInput {
  name: String
  posts: [CategoryUpdatePostsEntityRelationInput!]
  _dummy_field_: Boolean
}

input CategoryUpdatePostsEntityRelationInput {
  create: PostWithoutCategoriesCreateInput
  update: CategoryUpdatePostsRelationInput
  upsert: CategoryUpsertPostsRelationInput
  connect: PostUniqueWhere
  disconnect: PostUniqueWhere
  delete: PostUniqueWhere
  alias: String
}

input CategoryUpdatePostsRelationInput {
  by: PostUniqueWhere
  data: PostWithoutCategoriesUpdateInput
}

input PostWithoutCategoriesUpdateInput {
  state: PostState
  publishedAt: DateTime
  author: PostUpdateAuthorEntityRelationInput
  locales: [PostUpdateLocalesEntityRelationInput!]
  _dummy_field_: Boolean
}

input CategoryUpsertPostsRelationInput {
  by: PostUniqueWhere
  update: PostWithoutCategoriesUpdateInput
  create: PostWithoutCategoriesCreateInput
}

type QueryTransaction {
  getAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere): Author
  listAuthor(filter: AuthorWhere, orderBy: [AuthorOrderBy!], offset: Int, limit: Int): [Author!]!
  paginateAuthor(filter: AuthorWhere, orderBy: [AuthorOrderBy!], skip: Int, first: Int): AuthorConnection!
  validateCreateAuthor(data: AuthorCreateInput!): _ValidationResult!
  validateUpdateAuthor(by: AuthorUniqueWhere!, data: AuthorUpdateInput!): _ValidationResult!
  getPost(by: PostUniqueWhere!, filter: PostWhere): Post
  listPost(filter: PostWhere, orderBy: [PostOrderBy!], offset: Int, limit: Int): [Post!]!
  paginatePost(filter: PostWhere, orderBy: [PostOrderBy!], skip: Int, first: Int): PostConnection!
  validateCreatePost(data: PostCreateInput!): _ValidationResult!
  validateUpdatePost(by: PostUniqueWhere!, data: PostUpdateInput!): _ValidationResult!
  getPostLocale(by: PostLocaleUniqueWhere!, filter: PostLocaleWhere): PostLocale
  listPostLocale(filter: PostLocaleWhere, orderBy: [PostLocaleOrderBy!], offset: Int, limit: Int): [PostLocale!]!
  paginatePostLocale(filter: PostLocaleWhere, orderBy: [PostLocaleOrderBy!], skip: Int, first: Int): PostLocaleConnection!
  validateCreatePostLocale(data: PostLocaleCreateInput!): _ValidationResult!
  validateUpdatePostLocale(by: PostLocaleUniqueWhere!, data: PostLocaleUpdateInput!): _ValidationResult!
  getCategory(by: CategoryUniqueWhere!, filter: CategoryWhere): Category
  listCategory(filter: CategoryWhere, orderBy: [CategoryOrderBy!], offset: Int, limit: Int): [Category!]!
  paginateCategory(filter: CategoryWhere, orderBy: [CategoryOrderBy!], skip: Int, first: Int): CategoryConnection!
  validateCreateCategory(data: CategoryCreateInput!): _ValidationResult!
  validateUpdateCategory(by: CategoryUniqueWhere!, data: CategoryUpdateInput!): _ValidationResult!
}

type Info {
  description: String
}

type Mutation {
  createAuthor(data: AuthorCreateInput!): AuthorCreateResult!
  deleteAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere): AuthorDeleteResult!
  updateAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere, data: AuthorUpdateInput!): AuthorUpdateResult!
  upsertAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere, update: AuthorUpdateInput!, create: AuthorCreateInput!): AuthorUpsertResult!
  createPost(data: PostCreateInput!): PostCreateResult!
  deletePost(by: PostUniqueWhere!, filter: PostWhere): PostDeleteResult!
  updatePost(by: PostUniqueWhere!, filter: PostWhere, data: PostUpdateInput!): PostUpdateResult!
  upsertPost(by: PostUniqueWhere!, filter: PostWhere, update: PostUpdateInput!, create: PostCreateInput!): PostUpsertResult!
  createPostLocale(data: PostLocaleCreateInput!): PostLocaleCreateResult!
  deletePostLocale(by: PostLocaleUniqueWhere!, filter: PostLocaleWhere): PostLocaleDeleteResult!
  updatePostLocale(by: PostLocaleUniqueWhere!, filter: PostLocaleWhere, data: PostLocaleUpdateInput!): PostLocaleUpdateResult!
  upsertPostLocale(by: PostLocaleUniqueWhere!, filter: PostLocaleWhere, update: PostLocaleUpdateInput!, create: PostLocaleCreateInput!): PostLocaleUpsertResult!
  createCategory(data: CategoryCreateInput!): CategoryCreateResult!
  deleteCategory(by: CategoryUniqueWhere!, filter: CategoryWhere): CategoryDeleteResult!
  updateCategory(by: CategoryUniqueWhere!, filter: CategoryWhere, data: CategoryUpdateInput!): CategoryUpdateResult!
  upsertCategory(by: CategoryUniqueWhere!, filter: CategoryWhere, update: CategoryUpdateInput!, create: CategoryCreateInput!): CategoryUpsertResult!
  transaction(options: MutationTransactionOptions): MutationTransaction!
  query: Query!
}

type AuthorCreateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Author
  validation: _ValidationResult!
}

interface MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
}

type _MutationError {
  path: [_PathFragment!]! @deprecated(reason: "Use `paths`.")
  paths: [[_PathFragment!]!]!
  type: _MutationErrorType!
  message: String
}

enum _MutationErrorType {
  NotNullConstraintViolation
  UniqueConstraintViolation
  ForeignKeyConstraintViolation
  NotFoundOrDenied
  NonUniqueWhereInput
  InvalidDataInput
  SqlError
}

type AuthorDeleteResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Author
}

type AuthorUpdateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Author
  validation: _ValidationResult!
}

type AuthorUpsertResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Author
  validation: _ValidationResult!
}

type PostCreateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Post
  validation: _ValidationResult!
}

type PostDeleteResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Post
}

type PostUpdateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Post
  validation: _ValidationResult!
}

type PostUpsertResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Post
  validation: _ValidationResult!
}

type PostLocaleCreateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: PostLocale
  validation: _ValidationResult!
}

type PostLocaleDeleteResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: PostLocale
}

type PostLocaleUpdateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: PostLocale
  validation: _ValidationResult!
}

type PostLocaleUpsertResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: PostLocale
  validation: _ValidationResult!
}

type CategoryCreateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Category
  validation: _ValidationResult!
}

type CategoryDeleteResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Category
}

type CategoryUpdateResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Category
  validation: _ValidationResult!
}

type CategoryUpsertResult implements MutationResult {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  node: Category
  validation: _ValidationResult!
}

type MutationTransaction {
  ok: Boolean!
  errorMessage: String
  errors: [_MutationError!]!
  validation: _ValidationResult!
  createAuthor(data: AuthorCreateInput!): AuthorCreateResult!
  deleteAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere): AuthorDeleteResult!
  updateAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere, data: AuthorUpdateInput!): AuthorUpdateResult!
  upsertAuthor(by: AuthorUniqueWhere!, filter: AuthorWhere, update: AuthorUpdateInput!, create: AuthorCreateInput!): AuthorUpsertResult!
  createPost(data: PostCreateInput!): PostCreateResult!
  deletePost(by: PostUniqueWhere!, filter: PostWhere): PostDeleteResult!
  updatePost(by: PostUniqueWhere!, filter: PostWhere, data: PostUpdateInput!): PostUpdateResult!
  upsertPost(by: PostUniqueWhere!, filter: PostWhere, update: PostUpdateInput!, create: PostCreateInput!): PostUpsertResult!
  createPostLocale(data: PostLocaleCreateInput!): PostLocaleCreateResult!
  deletePostLocale(by: PostLocaleUniqueWhere!, filter: PostLocaleWhere): PostLocaleDeleteResult!
  updatePostLocale(by: PostLocaleUniqueWhere!, filter: PostLocaleWhere, data: PostLocaleUpdateInput!): PostLocaleUpdateResult!
  upsertPostLocale(by: PostLocaleUniqueWhere!, filter: PostLocaleWhere, update: PostLocaleUpdateInput!, create: PostLocaleCreateInput!): PostLocaleUpsertResult!
  createCategory(data: CategoryCreateInput!): CategoryCreateResult!
  deleteCategory(by: CategoryUniqueWhere!, filter: CategoryWhere): CategoryDeleteResult!
  updateCategory(by: CategoryUniqueWhere!, filter: CategoryWhere, data: CategoryUpdateInput!): CategoryUpdateResult!
  upsertCategory(by: CategoryUniqueWhere!, filter: CategoryWhere, update: CategoryUpdateInput!, create: CategoryCreateInput!): CategoryUpsertResult!
  query: Query
}

input MutationTransactionOptions {
  deferForeignKeyConstraints: Boolean
}
