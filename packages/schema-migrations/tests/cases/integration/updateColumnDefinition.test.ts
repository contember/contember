import { testMigrations } from '../../src/tests'
import { SchemaBuilder, SchemaDefinition as def, createSchema } from '@contember/schema-definition'
import { Model } from '@contember/schema'
import { SQL } from '../../src/tags'
import { updateColumnDefinitionModification } from '../../../src'

testMigrations('update column definition', {
	originalSchema: new SchemaBuilder()
		.entity('Author', e =>
			e.column('name', c => c.type(Model.ColumnType.String)).column('registeredAt', c => c.type(Model.ColumnType.Date)),
		)
		.buildSchema(),
	updatedSchema: new SchemaBuilder()
		.entity('Author', e =>
			e
				.column('name', c => c.type(Model.ColumnType.String))
				.column('registeredAt', c => c.type(Model.ColumnType.DateTime)),
		)
		.buildSchema(),
	diff: [
		{
			modification: 'updateColumnDefinition',
			entityName: 'Author',
			fieldName: 'registeredAt',
			definition: {
				type: Model.ColumnType.DateTime,
				columnType: 'timestamptz',
				nullable: true,
			},
		},
	],
	sql: SQL`ALTER TABLE "author"
		ALTER "registered_at" SET DATA TYPE timestamptz USING "registered_at"::timestamptz;`,
})

namespace SeqOrig {
	export class Author {
		idSeq = def.intColumn()
	}
}
namespace SeqUpdated {
	export class Author {
		idSeq = def.intColumn().notNull().sequence({ start: 10 })
	}
}
testMigrations('add sequence to existing column', {
	originalSchema: createSchema(SeqOrig).model,
	updatedSchema: createSchema(SeqUpdated).model,
	diff: [
		updateColumnDefinitionModification.createModification({
			entityName: 'Author',
			fieldName: 'idSeq',
			definition: {
				type: Model.ColumnType.Int,
				columnType: 'integer',
				nullable: false,
				sequence: {
					precedence: 'BY DEFAULT',
					start: 10,
				},
			},
		}),
	],
	sql: SQL`
ALTER TABLE "author"
		ALTER "id_seq" SET DATA TYPE integer USING COALESCE("id_seq"::integer, nextval(PG_GET_SERIAL_SEQUENCE($pga$author$pga$, $pga$id_seq$pga$))),
		ALTER "id_seq" SET NOT NULL,
		ALTER "id_seq" ADD GENERATED BY DEFAULT AS IDENTITY (START WITH 10);`,
})

